plugins {
	id 'org.springframework.boot' version '2.1.6.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'ch.so.agi.solr'
//version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

repositories {
	mavenCentral()
}

dependencies {
	compile group: 'org.hashids', name: 'hashids', version: '1.0.1'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	intTestImplementation 'org.springframework.boot:spring-boot-starter-test'
	intTestImplementation 'org.springframework.boot:spring-boot-starter-web'	
}

task copyJar(type: Copy, dependsOn: build){
    from file("$buildDir/libs/indexupdater.jar")
    into file("$projectDir/img_build/tmp")
}

task stopDb(type:Exec) {
 	commandLine 'docker', 'rm', '-f', 'pgdev'
 	ignoreExitValue true
}

task startDb(type:Exec, dependsOn:stopDb) {
 	workingDir "$projectDir/src/intTest/resources/sourcedb"
 	commandLine './run_image.sh', 'bg'
}

task stopSolr(type:Exec) {
 	commandLine 'docker', 'rm', '-f', 'solr'
 	ignoreExitValue true
}

task startSolr(type:Exec, dependsOn:stopSolr) {
 	workingDir "$projectDir/src/intTest/resources/solr"
 	commandLine './run_image.sh'
}

task stopEnv(){
	dependsOn startDb
	dependsOn startSolr	
}

task startEnv(){
	dependsOn startDb
	dependsOn startSolr	
}

task buildImage(type:Exec, dependsOn: copyJar) {
	def githash = getCheckedOutGitCommitHash()
	def buildident = getTravisBuildNumber()
	def build_timestamp = getTimestamp()


 	workingDir "$projectDir/img_build"
 	commandLine 'docker', 'build',
				'--no-cache', '--force-rm',
				'-t', "sogis/indexupdater:$buildident",
				'--label', "indexupdater.created=$build_timestamp", 
				'--label', "indexupdater.git_commit=$githash",
				'--label', "indexupdater.travis_build=$buildident",
				'-f', 'Dockerfile',  '.'
}


task tagImage(type:Exec, dependsOn: buildImage) {
	def buildident = getTravisBuildNumber()
	
 	commandLine 'docker', 'tag', 
				"sogis/indexupdater:$buildident",
				"sogis/indexupdater:latest"
}

task stopContainer(type:Exec) {
 	commandLine 'docker', 'rm', '-f', 'indexupdater'
 	ignoreExitValue true
}

task runImage(type:Exec){
 	workingDir "$projectDir/img_build"
 	commandLine './run_image.sh', 'bg'
 	
 	dependsOn stopContainer
 	dependsOn tagImage
 	dependsOn startEnv
 	
 	doLast { 	
        sleep(10000)
    }
}

task intTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
    
    mustRunAfter runImage
}

task testImage(){
	dependsOn runImage
	dependsOn intTest	
}

String getTravisBuildNumber() {
	String val = System.getenv('TRAVIS_BUILD_NUMBER')
	
	if(val == null)
		val = 'localbuild'
		
	return val
}

def getCheckedOutGitCommitHash() {
  'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}
